<div class="nav">
<ul>
<li><a href="#">Top</a></li>
<li><a href="#">About</a></li>
<li class="has-child"><a href="#">Service</a><!--子要素を持つ li にはhas-childというクラス名をつける-->
  <ul>
  <li><a href="#">Service Top</a></li>
  <li><a href="#">Service-1</a></li>
  <li class="has-child"><a href="#">Service-2</a>
    <ul>
    <li><a href="#">Service-2 Top</a></li>
    <li><a href="#">Service-2-1</a></li>
    <li><a href="#">Service-2-2</a></li>
    <li><a href="#">Service-2-3</a></li>
    <li><a href="#">Service-2-4</a></li>
    </ul>
 </li>
 <li><a href="#">Service-3</a></li>
</ul>
</li>
<li class="has-child"><a href="#">Blog</a>
  <ul>
  <li><a href="#">Blog Top</a></li>
  <li><a href="#">Blog-1</a></li>
  <li><a href="#">Blog-2</a></li>
  <li><a href="#">Blog-3</a></li>
  <li><a href="#">Blog-4</a></li>
  </ul>
</li>
</ul>
</div>


<style>
/*========= ナビゲーションドロップダウンのためのCSS ===============*/

/*==ナビゲーション全体の設定*/
.nav{
	background:#333;
	color:#fff;
	text-align: center;
  position:absolute;
  width:100%;
}
/*ナビゲーションを横並びに*/
.nav ul{
	list-style: none;
	display: flex;
	justify-content: center;
  width:100%;
}
/*2階層目以降は横並びにしない*/
.nav ul ul{
	display: block;
}

/*下の階層のulや矢印の基点にするためliにrelativeを指定*/
.nav ul li{
	position: relative;
}

/*ナビゲーションのリンク設定*/
.nav ul li a{
	display: block;
	text-decoration: none;
	color: #999;
	padding:20px 35px;
	transition:all .3s;
}

.nav ul li li a{
	padding:10px 35px;
}

.nav ul li a:hover{
	color:#fff;	
}

/*==矢印の設定*/

/*2階層目を持つliの矢印の設定*/
.nav ul li.has-child::before{
	content:'';
	position: absolute;
	left:15px;
	top:25px;
	width:6px;
	height:6px;
	border-top: 2px solid #999;
    border-right:2px solid #999;
    transform: rotate(135deg);
    
}

/*== 2・3階層目の共通設定 */

/*下の階層を持っているulの指定*/
.nav li.has-child ul{
    /*絶対配置で位置を指定*/
	position: absolute;
	left:0;
	top:62px;
	z-index: 4;
    /*形状を指定*/
	background:#28BFE7;
	width:180px;
    /*はじめは非表示*/
	visibility: hidden;
	opacity: 0;
    /*アニメーション設定*/
	transition: all .3s;
}

/*hoverしたら表示*/
.nav li.has-child:hover > ul,
.nav li.has-child ul li:hover > ul,
.nav li.has-child:active > ul,
.nav li.has-child ul li:active > ul{
  visibility: visible;
  opacity: 1;
}

/*ナビゲーションaタグの形状*/
.nav li.has-child ul li a{
	color: #fff;
	border-bottom:solid 1px rgba(255,255,255,0.6);
}

.nav li.has-child ul li:last-child a{
	border-bottom:none;
}

.nav li.has-child ul li a:hover,
.nav li.has-child ul li a:active{
	background:#3577CA;
}



/*==768px以下の形状*/

@media screen and (max-width:1308px){
	.nav{
		padding: 0;
	}
	
	.nav ul{
		display: block;
	}
	
	.nav li.has-child ul,
	.nav li.has-child ul ul{
  	position: relative;
	left:0;
	top:0;
	width:100%;
	visibility:visible;/*JSで制御するため一旦表示*/
	opacity:1;/*JSで制御するため一旦表示*/
	display: none;/*JSのslidetoggleで表示させるため非表示に*/
	transition:none;/*JSで制御するためCSSのアニメーションを切る*/
}
	
.nav ul li a{
	border-bottom:1px solid #ccc;
}

/*矢印の位置と向き*/

.nav ul li.has-child::before{
	left:20px;	
}

.nav ul ul li.has-child::before{
    transform: rotate(135deg);
	left:20px;
}
    
.nav ul li.has-child.active::before{
    transform: rotate(-45deg);
}
}
</style>


<script>
//ドロップダウンの設定を関数でまとめる
$(function(){
	var width = $(window).width();
  alert(width);
	if(width <= 1400) {//横幅が768px以下の場合 $(".has-child>a").off('click');	//has-childクラスがついたaタグのonイベントを複数登録を避ける為offにして一旦初期状態へ
		$(".has-child a").on('click', function() {//has-childクラスがついたaタグをクリックしたら
			var parentElem =  $(this).parent();// aタグから見た親要素のliを取得し
			$(parentElem).toggleClass('active');//矢印方向を変えるためのクラス名を付与して
			$(parentElem).children('ul').stop().slideToggle(500);//liの子要素のスライドを開閉させる※数字が大きくなるほどゆっくり開く
			return false;//リンクの無効化
		});
	}else{//横幅が768px以上の場合
		$(".has-child a").off('click');//has-childクラスがついたaタグのonイベントをoff(無効)にし
		$(".has-child").removeClass('active');//activeクラスを削除
		$('.has-child').children('ul').css("display","");//スライドトグルで動作したdisplayも無効化にする
	}
});

// ページがリサイズされたら動かしたい場合の記述
$(window).resize(function() {
	mediaQueriesWin();/* ドロップダウンの関数を呼ぶ*/
});

// ページが読み込まれたらすぐに動かしたい場合の記述
$(window).on('load',function(){
	mediaQueriesWin();/* ドロップダウンの関数を呼ぶ*/
});
</script>
